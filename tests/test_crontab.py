import unittest
from crony.crontab import CommandBuilder, Command

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

class TestCommand(unittest.TestCase):
    
    def test_command(self):
        command1 = Command(['a', 'b', 'c'], shell=True)
        self.assertEquals('a b c', command1.command)
        self.assertTrue(command1.shell)
        command2 = Command(['a', 'b', 'c'], shell=False)
        self.assertEquals('a b c', command2.command)
        self.assertFalse(command2.shell)
        command3 = Command(['a', 'b', 'c'])
        self.assertEquals('a b c', command3.command)
        self.assertFalse(command3.shell)

    def test_run(self):
        command = Command(["python", "-c", 
                           "import sys; sys.stdout.write('passed')"])
        ps = command.run()
        self.assertTrue(ps.stdout.read(), "passed")

class TestCommandBuilder(unittest.TestCase):

    def setUp(self):
        sfd = StringIO()
        sfd.write("* * * * * ls /tmp/*.csv\n")
        sfd.write("* * * * * ls /tmp/*.logs\n")
        self.jobs = sfd.getvalue()

    def test_initialization(self):
        # check behaviour of different representations of
        # the localhost machine
        cb1 = CommandBuilder()
        self.assertEquals(cb1.is_localhost, True)
        self.assertEquals(cb1.uri, 'localhost')
        self.assertEquals(cb1.cronuser_arg, None)

        cb1 = CommandBuilder('127.0.0.1', cronuser='jman')
        self.assertEquals(cb1.is_localhost, True)
        self.assertEquals(cb1.uri, 'localhost')
        self.assertEquals(cb1.cronuser_arg, '-ujman')

        cb2 = CommandBuilder('0.0.0.0', cronuser='jman')
        self.assertEquals(cb2.is_localhost, True)
        self.assertEquals(cb2.uri, 'localhost')
        self.assertEquals(cb2.cronuser_arg, '-ujman')

        cb3 = CommandBuilder('localhost', cronuser='jman')
        self.assertEquals(cb3.is_localhost, True)
        self.assertEquals(cb3.uri, 'localhost')
        self.assertEquals(cb3.cronuser_arg, '-ujman')

        # test remote initialization
        kwargs = {
            'hostname': 'google.com', 
            'username': 'jonathan',
        }
        cb4 = CommandBuilder(**kwargs)
        self.assertEquals(cb4.is_localhost, False)
        self.assertEquals(cb4.uri, 'jonathan@google.com')
        self.assertEquals(cb4.port, '22')
        self.assertEquals(cb4.username, 'jonathan')
        self.assertEquals(cb4.cronuser_arg, None)

        # no username and different port
        kwargs = {
            'hostname': 'google.com', 
            'port': '55',
        }
        cb5 = CommandBuilder(**kwargs)
        self.assertEquals(cb5.is_localhost, False)
        self.assertEquals(cb5.uri, 'google.com')
        self.assertEquals(cb5.port, '55')
        self.assertEquals(cb5.cronuser_arg, None)


    def test_list(self):
        # local test
        localcb = CommandBuilder()
        self.assertEquals("crontab -l", localcb.list().command)

        # remote test
        remotecb = CommandBuilder(hostname="example.com")
        self.assertEquals("ssh -p 22 example.com crontab -l", remotecb.list().command)

        # different port
        remotecb = CommandBuilder(hostname="example.com", port="53")
        self.assertEquals("ssh -p 53 example.com crontab -l", remotecb.list().command)

    def test_remove(self):
        # test the command generated by 'remove'
        # under different environments
        localcb = CommandBuilder()
        self.assertEquals("crontab -r", localcb.remove().command)

        # remote test
        remotecb = CommandBuilder(hostname="example.com")
        self.assertEquals("ssh -p 22 example.com crontab -r", remotecb.remove().command)

        # different port
        remotecb = CommandBuilder(hostname="example.com", port="53")
        self.assertEquals("ssh -p 53 example.com crontab -r", remotecb.remove().command)

    def test_append(self):
        # local test
        localappendcommand = ("(crontab -l 2> /dev/null; "
                              "printf \"" + self.jobs + "\") "
                              "| crontab -")
        localcb = CommandBuilder()
        self.assertEquals(localappendcommand, 
                        localcb.append(self.jobs).command)

        # remote test
        remoteappendcommand = ("ssh -p 22 example.com "
                               "(crontab -l 2> /dev/null; "
                               "printf \"" + self.jobs + "\") "
                               "| crontab -")
        remotecb = CommandBuilder(hostname="example.com")
        self.assertEquals(remoteappendcommand, 
                        remotecb.append(self.jobs).command)

        # different port
        remoteappendcommand = ("ssh -p 58 example.com "
                               "(crontab -l 2> /dev/null; "
                               "printf \"" + self.jobs + "\") "
                               "| crontab -")
        remotecb = CommandBuilder(hostname="example.com", port="58")
        self.assertEquals(remoteappendcommand, 
                        remotecb.append(self.jobs).command)

    def test_install(self):
        # local test
        localinstallcommand = ("(printf \"" + self.jobs + "\") "
                               "| crontab -")
        localcb = CommandBuilder()
        self.assertEquals(localinstallcommand, 
                        localcb.install(self.jobs).command)

        # remote test
        remoteappendcommand = ("ssh -p 22 example.com "
                               "(printf \"" + self.jobs + "\") "
                               "| crontab -")
        remotecb = CommandBuilder(hostname="example.com")
        self.assertEquals(remoteappendcommand, 
                        remotecb.install(self.jobs).command)

        # different port
        remoteappendcommand = ("ssh -p 5000 example.com "
                               "(printf \"" + self.jobs + "\") "
                               "| crontab -")
        remotecb = CommandBuilder(hostname="example.com", port="5000")
        self.assertEquals(remoteappendcommand, 
                        remotecb.install(self.jobs).command)

